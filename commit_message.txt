feat: add data models for dynamic guidance structure system

    Implement foundational data models to support user-configurable guidance structure modes (fixed vs dynamic) as the first step of a 6-step
    implementation plan. This introduces the capability for AI to generate 3-8 flexible sections with dynamic titles instead of the current fixed
    7-section format.

    ## New Files Added:

    ### DynamicGuidanceModels.swift
    - **DynamicGuidanceResponse**: Core model for flexible guidance with variable sections (3-8)
    - **GuidanceSection**: Individual section model with dynamic titles, content, and ordering
    - **GuidanceResponseProtocol**: Unified interface for both fixed and dynamic guidance types
    - **Protocol Extensions**: Backward compatibility bridge for existing GuidanceResponse

    ### GuidanceStructureSettings.swift
    - **GuidanceStructureMode**: Enum defining fixed vs dynamic structure modes with user-friendly descriptions
    - **GuidanceStructureSettings**: ObservableObject managing user preferences with @AppStorage persistence
    - **Mode Management**: Toggle functionality and computed properties for structure type detection

    ## Technical Implementation:

    ### Dynamic Guidance Architecture
    ```swift
    struct DynamicGuidanceResponse {
        let title: String
        let sections: [GuidanceSection]  // 3-8 flexible sections
        let totalSections: Int
    }
    ```
    Unified Protocol Design

    - Common interface for both guidance response types
    - Seamless conversion between fixed and dynamic formats
    - Maintains existing functionality while enabling new features

    User Preference Storage

    - Persistent settings using @AppStorage with "guidanceStructureMode" key
    - Default to fixed structure (maintains current behavior)
    - ObservableObject integration for real-time UI updates

    Backward Compatibility:

    - ‚úÖ Zero impact on existing code
    - ‚úÖ Current GuidanceResponse works unchanged
    - ‚úÖ Protocol extensions provide seamless integration
    - ‚úÖ Default mode preserves current user experience

    Foundation for Future Steps:

    - Settings UI toggle (Step 2)
    - OpenAI prompt logic updates (Step 3)
    - Dynamic content parsing (Step 4)
    - UI component updates (Step 5)
    - Error handling and fallbacks (Step 6)

    Build Status:

    ‚úÖ Clean compilation with no errors or conflicts
    üì¶ 3 files changed, 111 insertions (+), 2 deletions (-)
    üèóÔ∏è Project structure prepared for dynamic guidance implementation

    This establishes the data layer foundation for flexible AI-generated guidance sections while maintaining full compatibility with the existing
    fixed structure system.

