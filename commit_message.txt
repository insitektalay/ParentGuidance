feat: dynamic Foundation Tools and framework sync fix

fix: resolve framework activation status sync between Library and Alerts views

The Library view's FoundationToolCard was showing "Foundational Framework Not Yet Established"
even after frameworks were successfully activated in the Alerts view, while the Settings view
correctly displayed active frameworks.

Root Cause:
- Settings view uses appCoordinator.currentUserId as familyId for framework queries
- Library view was using selectionManager.currentFamilyId which wasn't properly synchronized
- This caused FoundationToolCard to query the database with different/nil familyId values
- Framework generation worked and saved correctly, but Library couldn't retrieve the active status

Solution:
- Updated LibraryView to pass appCoordinator.currentUserId to FoundationToolCard
- This mirrors the working pattern from SettingsView exactly
- Ensures consistent familyId usage across all framework state management

Impact:
- Framework activation status now syncs correctly between all views
- Users can see active framework status immediately in Library after activation
- Complete framework lifecycle now works end-to-end: generate → activate → display

Files Modified:
- Services/AppCoordinator.swift: Added currentFamilyId property and population during auth
- Views/Core/Alerts/AlertView.swift: Fixed hardcoded familyId: nil to use appCoordinator
- Views/Core/LibraryView.swift: Changed FoundationToolCard familyId source to appCoordinator

This resolves the framework generation dysfunction where users couldn't see their activated
frameworks and the generate button became unresponsive after the first use.

feat: implement dynamic Foundation Tools management in Settings tab

## Summary
Transformed the static Foundation Tools section in Settings into a fully dynamic, database-integrated framework management interface with
real-time status display and framework actions.

## Changes Made

### Core Implementation
- **SettingsFrameworkState Class**: Created ObservableObject with `@Published` properties for framework state management
  - `currentFramework: FrameworkRecommendation?` - Active framework data
  - `isLoading: Bool` - Loading state tracking
  - `errorMessage: String?` - Error handling and display
  - `loadFramework(familyId:)` - Async database integration with FrameworkStorageService
  - `deactivateFramework()` - Framework deactivation functionality

### Database Integration
- **Dynamic Data Loading**: Integrated `FrameworkStorageService.shared.getActiveFramework(familyId:)` for real framework status
- **Family ID Context**: Uses `appCoordinator.currentUserId` as familyId following existing app patterns
- **Proper Async Handling**: MainActor annotations and error handling for database operations

### UI State Management
- **Loading State**: ProgressView with "Loading framework status..." message
- **Error State**: Error display with "Try Again" retry functionality
- **Active Framework State**: Rich display with:
  - Checkmark icon and "Active Framework" label in bright blue
  - Framework name in large semibold text
  - Framework description from notificationText
  - "Framework Guide" button (blue) and "Deactivate" button (terracotta outline)
- **Inactive State**: Clean "No active framework currently set up" with "View Framework Tools" button

### Framework Actions
- **Deactivate Framework**: Fully functional integration with `FrameworkStorageService.deactivateFramework(id:)`
- **Framework Guide**: Button prepared for future navigation implementation
- **View Framework Tools**: Button ready for framework discovery flow
- **Error Retry**: "Try Again" functionality for failed framework loads

### Design Consistency
- Applied ColorPalette theming (navy background, white text, terracotta accents, bright blue active states)
- Followed existing app button styling patterns and visual hierarchy
- Consistent spacing and typography matching FoundationToolCard patterns
- Proper card backgrounds and corner radius styling

## Technical Architecture
- **State-Driven UI**: Conditional rendering based on framework loading, error, active, and inactive states
- **Reactive Updates**: `@StateObject` integration for automatic UI updates on framework state changes
- **Error Handling**: Comprehensive error catching with user-friendly retry mechanisms
- **Performance**: Efficient loading on view appearance with proper cleanup

## Integration Points
- **AppCoordinator**: Seamless integration with existing user context and family ID management
- **FrameworkStorageService**: Full utilization of existing framework database operations
- **Settings Navigation**: Properly integrated into MainTabView Settings tab workflow

This transformation provides users with real-time framework status visibility and management capabilities directly within Settings, replacing
static placeholder content with a fully functional framework management interface.

